import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import warnings
import re
from nltk.corpus import stopwords
from nltk import word_tokenize


def no_text_index(string):
    return any([item.isalpha() for item in string])


def word_count(string):
    """
    Overview: used for generating word count. Can be applied to apply when workign 
    with pd.series data.
    """
    return len(string.split())


def word_count_column(series):
    """
    Overview: Another way of creating list of word counts for each row in series. 
    Specific towards the hotel dataset in this case. NOT RECOMMENDED.
    """
    return [word_count(i) for i in hotels["reviews.text"]]


def sentence_count(string):
    """
    Overview: Calculating sentence count when applied to review type data.
    """
    return len(re.split(r"[.!?]", string)[:-1])


def sentence_count_column(series):
    """
    Overview: Sentence count column applied to series
    """
    return [sentence_count(i) for i in series]


def remove_stopwords(string):
    """
    function for removing stopwords from string. Uses nltk's word_tokenize
    """
    swords = set(stopwords.words("english"))
    return " ".join([w for w in word_tokenize(string) if w not in swords])


def clean_text_series(series):
    """
    Overview: for removing stopwords from series. Hotels.pickle specific and therefore... 
    NOT RECOMMENDED
    """
    new_list = []
    for i in hotels["reviews.text"]:
        new_list.append(remove_stopwords(i))
    return new_list


def sample_mean(series):
    """
    Overview: Used for calculating sample mean. n-1
    """
    return sum(series) / (len(series) - 1)


def bootstrap(series, n):
    """
    Overview: Bootstrap function used in hypothesis testing
    """
    list_of_means = []
    for _ in range(n):
        list_of_means.append(
            round(sample_mean(series.sample(len(series), replace=True)), 3)
        )
    return list_of_means


def axisfunc(i):
    if i == 1:
        return 1
    else:
        if i % 4 == 0:
            return 1
        else:
            return 0
        
def embedding_mat(max_words,embedding_dim,word_idx,word_vectors):
    """
    Overview: Used to create embedding matrix used for input into LSTM embedding layer
    Input: max_words = words in word_index, embedding_dim = depth of word embedding (ex.300/word)
    word_idx = word_idex dict, word_vectors = word vectors generated by pre-built w2vec model.
    Output: embedding matrix
    """
    embedding_matrix = np.zeros((max_words,embedding_dims))
    for word,i in word_index.items():
        if i < max_words:
            try:
                embedding_vector = word_vectors.get_vector(word)
                if embedding_vector is not None:
                    embedding_matrix[i] = embedding_vector
            except:
                pass
    return embedding_matrix
